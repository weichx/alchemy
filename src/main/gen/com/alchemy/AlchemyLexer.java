// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Alchemy.flex

package com.alchemy;

import java.util.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.alchemy.AlchemyTokenTypes.*;
import static com.alchemy.AlchemyTokenSets.*;

//@SuppressWarnings("DuplicateBranchesInSwitch")

class AlchemyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTI_LINE_COMMENT_STATE = 2;
  public static final int QUO_STRING = 4;
  public static final int THREE_QUO_STRING = 6;
  public static final int APOS_STRING = 8;
  public static final int SHORT_TEMPLATE_ENTRY = 10;
  public static final int LONG_TEMPLATE_ENTRY = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\23\0\1\1\1\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\22\1\27\1\22\1\30\1\22"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\13\40"+
    "\1\41\10\40\1\42\5\40\1\43\1\44\1\45\1\46"+
    "\1\40\1\0\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\40\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\40\1\77\1\100\1\101\1\102"+
    "\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\3\1\2\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\21\7"+
    "\1\36\1\37\1\40\1\41\3\42\1\1\1\43\1\44"+
    "\1\45\1\2\1\1\2\2\1\1\1\2\2\46\1\6"+
    "\1\47\1\50\1\51\1\0\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\0\1\66\1\23\1\0\1\67\1\66\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\7\1\100"+
    "\7\7\1\101\11\7\1\102\1\7\1\103\1\104\3\7"+
    "\1\105\2\7\1\0\13\7\1\106\1\107\1\110\1\111"+
    "\1\0\1\112\1\113\1\114\1\0\1\1\1\0\1\46"+
    "\1\115\1\116\1\117\1\0\1\120\1\66\1\121\1\122"+
    "\24\7\1\123\1\124\2\7\1\125\4\7\1\0\2\7"+
    "\1\126\6\7\1\127\1\7\1\130\4\7\1\131\1\46"+
    "\1\132\1\133\2\7\1\134\1\7\1\135\1\7\1\136"+
    "\7\7\1\137\1\140\12\7\1\141\1\7\1\142\3\7"+
    "\1\143\5\7\1\144\1\7\1\145\1\7\1\146\1\147"+
    "\1\7\1\150\1\151\2\7\1\152\1\153\2\7\1\154"+
    "\1\155\1\156\7\7\1\157\1\7\1\160\2\7\1\161"+
    "\1\162\1\163\4\7\1\0\5\7\1\164\3\7\1\165"+
    "\1\166\1\7\1\167\1\170\1\171\4\7\1\172\1\7"+
    "\1\173\4\7\1\174\1\175\1\176\1\7\1\177\1\7"+
    "\1\200\2\7\1\0\1\201\1\202\1\203\1\204\1\205"+
    "\1\206\1\207\1\210\1\7\1\211\1\212\1\7\1\213"+
    "\1\214\1\215\2\7\1\216\3\7\1\217\1\143\1\220"+
    "\1\221\1\7\1\222\2\7\1\223\1\224\1\7\1\225"+
    "\1\226";

  private static int [] zzUnpackAction() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u03ed\0\u0430\0\u01d5\0\u0473\0\u04b6\0\u04f9"+
    "\0\u053c\0\u057f\0\u01d5\0\u05c2\0\u0605\0\u0648\0\u068b\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u01d5\0\u0b84\0\u01d5\0\u01d5"+
    "\0\u01d5\0\u0bc7\0\u0c0a\0\u0c4d\0\u01d5\0\u01d5\0\u0c90\0\u0cd3"+
    "\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u0eeb\0\u0f2e\0\u01d5\0\u0f71\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u0fb4\0\u0ff7\0\u01d5"+
    "\0\u103a\0\u107d\0\u10c0\0\u1103\0\u01d5\0\u1146\0\u01d5\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u1189\0\u11cc\0\u01d5\0\u120f\0\u1252"+
    "\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a"+
    "\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682"+
    "\0\u16c5\0\u0324\0\u1708\0\u174b\0\u0324\0\u178e\0\u17d1\0\u1814"+
    "\0\u0324\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u01d5"+
    "\0\u1c01\0\u01d5\0\u01d5\0\u0cd3\0\u1c44\0\u01d5\0\u01d5\0\u1c87"+
    "\0\u01d5\0\u0e22\0\u1cca\0\u01d5\0\u01d5\0\u1d0d\0\u1d50\0\u1d93"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa"+
    "\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u0324"+
    "\0\u0324\0\u2312\0\u2355\0\u0324\0\u2398\0\u23db\0\u241e\0\u2461"+
    "\0\u24a4\0\u24e7\0\u252a\0\u0324\0\u256d\0\u25b0\0\u25f3\0\u2636"+
    "\0\u2679\0\u26bc\0\u0324\0\u26ff\0\u0324\0\u2742\0\u2785\0\u27c8"+
    "\0\u280b\0\u01d5\0\u284e\0\u01d5\0\u01d5\0\u2891\0\u28d4\0\u0324"+
    "\0\u2917\0\u0324\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9"+
    "\0\u2aec\0\u2b2f\0\u2b72\0\u0324\0\u0324\0\u2bb5\0\u2bf8\0\u2c3b"+
    "\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u0324"+
    "\0\u2e53\0\u0324\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5"+
    "\0\u3028\0\u306b\0\u30ae\0\u0324\0\u30f1\0\u0324\0\u3134\0\u0324"+
    "\0\u0324\0\u3177\0\u0324\0\u0e65\0\u31ba\0\u31fd\0\u0324\0\u0324"+
    "\0\u3240\0\u3283\0\u0324\0\u32c6\0\u0324\0\u3309\0\u334c\0\u338f"+
    "\0\u33d2\0\u3415\0\u3458\0\u349b\0\u0324\0\u34de\0\u3521\0\u3564"+
    "\0\u35a7\0\u0324\0\u0324\0\u0324\0\u35ea\0\u362d\0\u3670\0\u36b3"+
    "\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u0324\0\u3888"+
    "\0\u38cb\0\u390e\0\u0324\0\u0324\0\u3951\0\u0324\0\u0324\0\u0324"+
    "\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u0324\0\u3aa0\0\u0324\0\u3ae3"+
    "\0\u3b26\0\u3b69\0\u3bac\0\u0324\0\u0324\0\u0324\0\u3bef\0\u0324"+
    "\0\u3c32\0\u0324\0\u3c75\0\u3cb8\0\u3cfb\0\u0324\0\u0324\0\u0324"+
    "\0\u0324\0\u0324\0\u0324\0\u0324\0\u0324\0\u3d3e\0\u0324\0\u0324"+
    "\0\u3d81\0\u0324\0\u0324\0\u0324\0\u3dc4\0\u3e07\0\u0324\0\u3e4a"+
    "\0\u3e8d\0\u3ed0\0\u0324\0\u01d5\0\u0324\0\u0324\0\u3f13\0\u0324"+
    "\0\u3f56\0\u3f99\0\u0324\0\u0324\0\u3fdc\0\u0324\0\u0324";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\7\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\3\15\1\41\1\10\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\15\1\53\4\15"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\2\15\1\65\1\66\1\67\1\70\14\71\1\72"+
    "\4\71\1\73\61\71\2\74\1\75\1\74\1\76\1\74"+
    "\1\77\35\74\1\100\36\74\4\101\1\102\1\101\1\77"+
    "\35\101\1\103\36\101\2\104\1\75\3\104\1\77\2\104"+
    "\1\76\32\104\1\105\36\104\40\10\3\106\4\10\22\106"+
    "\1\107\5\106\5\10\2\11\1\12\1\13\1\110\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\7\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\3\15\1\41\1\10\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\15"+
    "\1\53\4\15\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\2\15\1\111\1\66\1\112\1\70"+
    "\104\0\2\11\134\0\1\113\52\0\1\114\101\0\1\115"+
    "\105\0\1\15\13\0\7\15\7\0\3\15\4\0\30\15"+
    "\40\0\1\116\56\0\1\117\23\0\1\120\102\0\1\121"+
    "\63\0\1\122\16\0\1\123\65\0\1\124\14\0\1\125"+
    "\66\0\1\126\76\0\1\127\4\0\1\115\12\0\1\130"+
    "\66\0\1\131\1\0\7\132\10\0\1\133\1\134\11\0"+
    "\1\135\5\0\1\133\1\135\6\0\1\136\41\0\1\137"+
    "\105\0\1\140\102\0\1\141\1\142\101\0\1\143\66\0"+
    "\1\144\15\0\1\145\100\0\1\146\54\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\1\15\1\147\17\15\1\150"+
    "\6\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\1\151\17\15\1\152\7\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\1\153\6\15\1\154\3\15\1\155"+
    "\2\15\1\156\11\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\4\15\1\157\11\15\1\160\10\15\1\161"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\13\15"+
    "\1\162\1\15\1\163\10\15\1\164\1\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\1\165\7\15\1\166"+
    "\2\15\1\167\2\15\1\170\11\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\4\15\1\171\23\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\5\15\1\172"+
    "\6\15\1\173\1\174\3\15\1\175\6\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\4\15\1\176\16\15"+
    "\1\177\4\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\1\15\1\200\3\15\1\201\11\15\1\202\10\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\1\203"+
    "\27\15\10\0\1\204\1\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\4\15\1\205\23\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\4\15\1\206\15\15\1\207"+
    "\2\15\1\210\2\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\7\15\1\211\10\15\1\212\7\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\10\15\1\213"+
    "\17\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\1\214\15\15\1\215\11\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\7\15\1\216\1\217\17\15\40\0"+
    "\1\220\43\0\1\221\23\0\1\222\75\0\1\223\66\0"+
    "\2\74\1\0\1\74\1\0\1\74\1\0\35\74\1\224"+
    "\36\74\40\0\3\225\4\0\30\225\1\226\3\0\2\74"+
    "\1\0\100\74\4\101\1\0\1\101\1\0\35\101\1\0"+
    "\36\101\4\227\1\230\76\227\103\231\2\104\1\0\3\104"+
    "\1\0\2\104\1\0\32\104\1\232\40\104\1\0\100\104"+
    "\22\0\7\106\7\0\3\106\4\0\30\106\26\0\7\106"+
    "\7\0\3\106\4\0\7\106\1\233\20\106\10\0\1\234"+
    "\76\0\2\115\1\0\100\115\34\0\1\235\66\0\1\236"+
    "\76\0\1\237\110\0\7\240\72\0\1\131\1\0\7\132"+
    "\11\0\1\134\11\0\1\135\6\0\1\135\6\0\1\136"+
    "\51\0\1\133\20\0\1\133\61\0\1\241\123\0\1\241"+
    "\40\0\1\242\116\0\1\243\54\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\21\15\1\244\6\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\21\15\1\245\6\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\21\15"+
    "\1\246\6\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\4\15\1\247\23\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\21\15\1\250\1\251\5\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\1\252\27\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\1\253"+
    "\27\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\13\15\1\254\1\15\1\255\12\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\5\15\1\256\22\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\23\15\1\257"+
    "\4\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\15\15\1\260\12\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\21\15\1\261\6\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\23\15\1\262\4\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\17\15\1\263"+
    "\2\15\1\264\5\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\13\15\1\265\14\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\15\15\1\266\12\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\16\15\1\267"+
    "\11\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\20\15\1\270\7\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\22\15\1\271\5\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\17\15\1\272\10\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\22\15\1\273"+
    "\5\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\25\15\1\274\2\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\13\15\1\275\14\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\11\15\1\276\16\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\4\15\1\277"+
    "\23\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\20\15\1\300\7\15\10\0\1\301\104\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\22\15\1\302\5\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\1\303\21\15"+
    "\1\304\5\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\1\305\17\15\1\306\7\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\10\15\1\307\17\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\10\15\1\310"+
    "\7\15\1\311\7\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\23\15\1\312\3\15\1\313\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\15\15\1\314\12\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\20\15"+
    "\1\315\7\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\10\15\1\316\17\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\4\15\1\317\3\15\1\320\17\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\22\15"+
    "\1\321\5\15\40\0\1\322\70\0\7\225\7\0\3\225"+
    "\4\0\30\225\4\0\4\227\1\76\76\227\22\0\7\106"+
    "\7\0\3\106\4\0\10\106\1\323\17\106\42\0\1\324"+
    "\60\0\1\237\4\0\1\325\103\0\7\240\23\0\1\135"+
    "\6\0\1\135\25\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\22\15\1\326\5\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\4\15\1\327\23\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\4\15\1\330\23\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\1\331"+
    "\27\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\4\15\1\332\23\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\2\15\1\333\25\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\20\15\1\334\7\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\21\15\1\335"+
    "\6\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\16\15\1\336\11\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\21\15\1\337\1\340\5\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\1\341\27\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\1\15\1\342"+
    "\26\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\1\343\27\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\4\15\1\344\23\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\14\15\1\345\13\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\16\15\1\346\11\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\4\15"+
    "\1\347\23\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\21\15\1\350\6\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\1\351\27\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\1\352\27\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\13\15\1\353\2\15"+
    "\1\354\11\15\12\0\1\15\13\0\1\15\1\355\1\15"+
    "\1\356\1\15\1\357\1\360\7\0\3\15\4\0\4\15"+
    "\1\361\23\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\13\15\1\362\14\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\4\15\1\363\23\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\20\15\1\364\7\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\22\15"+
    "\1\365\5\15\10\0\1\366\104\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\23\15\1\367\4\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\13\15\1\370\14\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\22\15"+
    "\1\371\5\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\10\15\1\372\17\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\22\15\1\373\5\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\21\15\1\374\6\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\16\15"+
    "\1\375\11\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\4\15\1\376\23\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\22\15\1\377\5\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\3\15\1\u0100\24\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\15\15"+
    "\1\u0101\12\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\13\15\1\u0102\14\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\7\15\1\u0103\20\15\26\0\7\106"+
    "\7\0\3\106\4\0\21\106\1\u0104\6\106\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\20\15\1\u0105\7\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\20\15"+
    "\1\u0106\7\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\12\15\1\u0107\15\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\7\15\1\u0108\20\15\12\0\1\15"+
    "\13\0\1\15\1\u0109\1\15\1\u010a\3\15\7\0\3\15"+
    "\4\0\30\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\21\15\1\u010b\6\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\20\15\1\u010c\7\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\22\15\1\u010d\5\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\10\15"+
    "\1\u010e\17\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\23\15\1\u010f\4\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\13\15\1\u0110\14\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\14\15\1\u0111\13\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\20\15"+
    "\1\u0112\7\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\15\15\1\u0113\2\15\1\u0114\7\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\4\15\1\u0115\23\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\13\15"+
    "\1\u0116\14\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\22\15\1\u0117\5\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\4\15\1\u0118\23\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\20\15\1\u0119\7\15"+
    "\12\0\1\15\13\0\5\15\1\u011a\1\15\7\0\3\15"+
    "\4\0\30\15\12\0\1\15\13\0\2\15\1\u011b\4\15"+
    "\7\0\3\15\4\0\30\15\12\0\1\15\13\0\4\15"+
    "\1\u011c\2\15\7\0\3\15\4\0\30\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\20\15\1\u011d\7\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\2\15"+
    "\1\u011e\25\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\1\u011f\27\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\10\15\1\u0120\17\15\4\0\4\366\1\u0121"+
    "\76\366\6\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\20\15\1\u0122\7\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\4\15\1\u0123\23\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\10\15\1\u0124\17\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\15\15\1\u0125"+
    "\12\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\2\15\1\u0126\25\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\25\15\1\u0127\2\15\12\0\1\15\13\0"+
    "\1\15\1\u0128\1\15\1\u0129\1\15\1\u012a\1\u012b\7\0"+
    "\3\15\4\0\30\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\4\15\1\u012c\23\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\1\u012d\27\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\22\15\1\u012e\5\15"+
    "\12\0\1\15\13\0\5\15\1\u012f\1\15\7\0\3\15"+
    "\4\0\30\15\12\0\1\15\13\0\2\15\1\u0130\4\15"+
    "\7\0\3\15\4\0\30\15\12\0\1\15\13\0\3\15"+
    "\1\u0131\1\15\1\u0132\1\15\7\0\3\15\4\0\30\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\15\15"+
    "\1\u0133\12\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\13\15\1\u0134\14\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\4\15\1\u0135\23\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\10\15\1\u0136\17\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\22\15"+
    "\1\u0137\5\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\3\15\1\u0138\15\15\1\u0139\6\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\15\15\1\u013a\12\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\13\15"+
    "\1\u013b\14\15\12\0\1\15\13\0\2\15\1\u013c\1\u013d"+
    "\1\u013e\2\15\7\0\3\15\4\0\30\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\14\15\1\u013f\13\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\22\15"+
    "\1\u0140\5\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\5\15\1\u0141\22\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\22\15\1\u0142\5\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\22\15\1\u0143\5\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\1\u0144"+
    "\27\15\4\0\4\366\1\u0145\76\366\6\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\15\15\1\u0146\12\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\3\15\1\u0147"+
    "\24\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\2\15\1\u0148\25\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\6\15\1\u0149\21\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\7\15\1\u014a\20\15\12\0"+
    "\1\15\13\0\5\15\1\u014b\1\15\7\0\3\15\4\0"+
    "\30\15\12\0\1\15\13\0\2\15\1\u014c\4\15\7\0"+
    "\3\15\4\0\30\15\12\0\1\15\13\0\4\15\1\u014d"+
    "\2\15\7\0\3\15\4\0\30\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\2\15\1\u014e\25\15\12\0"+
    "\1\15\13\0\2\15\1\u014f\4\15\7\0\3\15\4\0"+
    "\30\15\12\0\1\15\13\0\4\15\1\u0150\2\15\7\0"+
    "\3\15\4\0\30\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\23\15\1\u0151\4\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\22\15\1\u0152\5\15\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\2\15\1\u0153"+
    "\25\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\21\15\1\u0154\6\15\12\0\1\15\13\0\7\15\7\0"+
    "\3\15\4\0\10\15\1\u0155\17\15\12\0\1\15\13\0"+
    "\7\15\7\0\3\15\4\0\1\u0156\27\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\27\15\1\u0157\12\0"+
    "\1\15\13\0\7\15\7\0\3\15\4\0\4\15\1\u0158"+
    "\23\15\12\0\1\15\13\0\7\15\7\0\3\15\4\0"+
    "\1\u0159\27\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\16\15\1\u015a\11\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\13\15\1\u015b\14\15\4\0\4\366"+
    "\1\u015c\76\366\6\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\22\15\1\u015d\5\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\4\15\1\u015e\23\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\16\15\1\u015f\11\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\13\15"+
    "\1\u0160\14\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\15\15\1\u0161\12\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\2\15\1\u0162\25\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\20\15\1\u0163\7\15"+
    "\12\0\1\15\13\0\7\15\7\0\3\15\4\0\15\15"+
    "\1\u0164\12\15\12\0\1\15\13\0\7\15\7\0\3\15"+
    "\4\0\22\15\1\u0165\5\15\12\0\1\15\13\0\7\15"+
    "\7\0\3\15\4\0\4\15\1\u0166\23\15\12\0\1\15"+
    "\13\0\7\15\7\0\3\15\4\0\21\15\1\u0167\6\15"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16415];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\1\2\0\1\11\7\1\3\11\2\1\1\11"+
    "\5\1\1\11\4\1\3\11\22\1\1\11\1\1\3\11"+
    "\3\1\2\11\11\1\4\11\1\0\1\1\1\11\1\1"+
    "\6\11\2\1\1\11\1\0\2\1\1\0\1\11\1\1"+
    "\5\11\2\1\1\11\35\1\1\0\13\1\1\11\1\1"+
    "\2\11\1\0\1\1\2\11\1\0\1\11\1\0\1\1"+
    "\2\11\1\1\1\0\1\1\3\11\35\1\1\0\20\1"+
    "\1\11\1\1\2\11\113\1\1\0\43\1\1\0\26\1"+
    "\1\11\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /* user code: */
  private static final class State {
    final int lBraceCount;
    final int state;

    private State(int state, int lBraceCount) {
      this.state = state;
      this.lBraceCount = lBraceCount;
    }

    @Override
    public String toString() {
      return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
    }
  }

  protected final Stack<State> myStateStack = new Stack<State>();
  protected int myLeftBraceCount;

  private void pushState(int state) {
    myStateStack.push(new State(yystate(), myLeftBraceCount));
    myLeftBraceCount = 0;
    yybegin(state);
  }

  private void popState() {
    State state = myStateStack.pop();
    myLeftBraceCount = state.lBraceCount;
    yybegin(state.state);
  }

  AlchemyLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AlchemyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  myLeftBraceCount = 0;
  myStateStack.clear();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return REGULAR_STRING_PART;
            }
          // fall through
          case 151: break;
          case 2:
            { return BAD_CHARACTER;
            }
          // fall through
          case 152: break;
          case 3:
            { return WHITE_SPACE;
            }
          // fall through
          case 153: break;
          case 4:
            { return NOT;
            }
          // fall through
          case 154: break;
          case 5:
            { pushState(QUO_STRING);        return OPEN_QUOTE;
            }
          // fall through
          case 155: break;
          case 6:
            { return HASH;
            }
          // fall through
          case 156: break;
          case 7:
            { return STANDARD_IDENTIFIER;
            }
          // fall through
          case 157: break;
          case 8:
            { return PERCENT;
            }
          // fall through
          case 158: break;
          case 9:
            { return AND;
            }
          // fall through
          case 159: break;
          case 10:
            { pushState(APOS_STRING);       return OPEN_QUOTE;
            }
          // fall through
          case 160: break;
          case 11:
            { return LPAREN;
            }
          // fall through
          case 161: break;
          case 12:
            { return RPAREN;
            }
          // fall through
          case 162: break;
          case 13:
            { return MUL;
            }
          // fall through
          case 163: break;
          case 14:
            { return PLUS;
            }
          // fall through
          case 164: break;
          case 15:
            { return COMMA;
            }
          // fall through
          case 165: break;
          case 16:
            { return MINUS;
            }
          // fall through
          case 166: break;
          case 17:
            { return DOT;
            }
          // fall through
          case 167: break;
          case 18:
            { return DIV;
            }
          // fall through
          case 168: break;
          case 19:
            { return INTEGER_LITERAL;
            }
          // fall through
          case 169: break;
          case 20:
            { return COLON;
            }
          // fall through
          case 170: break;
          case 21:
            { return SEMICOLON;
            }
          // fall through
          case 171: break;
          case 22:
            { return LT;
            }
          // fall through
          case 172: break;
          case 23:
            { return EQ;
            }
          // fall through
          case 173: break;
          case 24:
            { return GT;
            }
          // fall through
          case 174: break;
          case 25:
            { return QUESTION_MARK;
            }
          // fall through
          case 175: break;
          case 26:
            { return AT;
            }
          // fall through
          case 176: break;
          case 27:
            { return LBRACKET;
            }
          // fall through
          case 177: break;
          case 28:
            { return RBRACKET;
            }
          // fall through
          case 178: break;
          case 29:
            { return XOR;
            }
          // fall through
          case 179: break;
          case 30:
            { return LBRACE;
            }
          // fall through
          case 180: break;
          case 31:
            { return OR;
            }
          // fall through
          case 181: break;
          case 32:
            { return RBRACE;
            }
          // fall through
          case 182: break;
          case 33:
            { return BIN_NOT;
            }
          // fall through
          case 183: break;
          case 34:
            { return MULTI_LINE_COMMENT_BODY;
            }
          // fall through
          case 184: break;
          case 35:
            { popState();                   return WHITE_SPACE;
            }
          // fall through
          case 185: break;
          case 36:
            { popState();                   return CLOSING_QUOTE;
            }
          // fall through
          case 186: break;
          case 37:
            { return SHORT_TEMPLATE_ENTRY_START;
            }
          // fall through
          case 187: break;
          case 38:
            { popState(); return STANDARD_IDENTIFIER;
            }
          // fall through
          case 188: break;
          case 39:
            { myLeftBraceCount++; return LBRACE;
            }
          // fall through
          case 189: break;
          case 40:
            { if (myLeftBraceCount == 0) {
                                     popState();
                                     return LONG_TEMPLATE_ENTRY_END;
                                   }
                                   myLeftBraceCount--;
                                   return RBRACE;
            }
          // fall through
          case 190: break;
          case 41:
            { return NEQ;
            }
          // fall through
          case 191: break;
          case 42:
            { return SINGLE_LINE_COMMENT;
            }
          // fall through
          case 192: break;
          case 43:
            { return MOD_EQ;
            }
          // fall through
          case 193: break;
          case 44:
            { return AND_AND;
            }
          // fall through
          case 194: break;
          case 45:
            { return AND_EQ;
            }
          // fall through
          case 195: break;
          case 46:
            { return MUL_EQ;
            }
          // fall through
          case 196: break;
          case 47:
            { return PLUS_PLUS;
            }
          // fall through
          case 197: break;
          case 48:
            { return PLUS_EQ;
            }
          // fall through
          case 198: break;
          case 49:
            { return MINUS_MINUS;
            }
          // fall through
          case 199: break;
          case 50:
            { return MINUS_EQ;
            }
          // fall through
          case 200: break;
          case 51:
            { return DOT_DOT;
            }
          // fall through
          case 201: break;
          case 52:
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_COMMENT_START;
            }
          // fall through
          case 202: break;
          case 53:
            { return DIV_EQ;
            }
          // fall through
          case 203: break;
          case 54:
            { return UNSIGNED_INTEGER_LITERAL;
            }
          // fall through
          case 204: break;
          case 55:
            { return FLOAT_LITERAL;
            }
          // fall through
          case 205: break;
          case 56:
            { return DOUBLE_COLON;
            }
          // fall through
          case 206: break;
          case 57:
            { return LT_EQ;
            }
          // fall through
          case 207: break;
          case 58:
            { return EQ_EQ;
            }
          // fall through
          case 208: break;
          case 59:
            { return EXPRESSION_BODY_DEF;
            }
          // fall through
          case 209: break;
          case 60:
            { return GT_EQ;
            }
          // fall through
          case 210: break;
          case 61:
            { return ELVIS;
            }
          // fall through
          case 211: break;
          case 62:
            { return QUEST_QUEST;
            }
          // fall through
          case 212: break;
          case 63:
            { return XOR_EQ;
            }
          // fall through
          case 213: break;
          case 64:
            { return AS;
            }
          // fall through
          case 214: break;
          case 65:
            { return DO;
            }
          // fall through
          case 215: break;
          case 66:
            { return IF;
            }
          // fall through
          case 216: break;
          case 67:
            { return IN;
            }
          // fall through
          case 217: break;
          case 68:
            { return IS;
            }
          // fall through
          case 218: break;
          case 69:
            { return OF;
            }
          // fall through
          case 219: break;
          case 70:
            { return OR_EQ;
            }
          // fall through
          case 220: break;
          case 71:
            { return OR_OR;
            }
          // fall through
          case 221: break;
          case 72:
            { popState();                          return yystate() == MULTI_LINE_COMMENT_STATE ? MULTI_LINE_COMMENT_BODY : MULTI_LINE_COMMENT_END;
            }
          // fall through
          case 222: break;
          case 73:
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_COMMENT_BODY;
            }
          // fall through
          case 223: break;
          case 74:
            { pushState(SHORT_TEMPLATE_ENTRY); yypushback(yylength() - 1); return SHORT_TEMPLATE_ENTRY_START;
            }
          // fall through
          case 224: break;
          case 75:
            { pushState(LONG_TEMPLATE_ENTRY); return LONG_TEMPLATE_ENTRY_START;
            }
          // fall through
          case 225: break;
          case 76:
            { yypushback(1); return REGULAR_STRING_PART;
            }
          // fall through
          case 226: break;
          case 77:
            { pushState(THREE_QUO_STRING);  return OPEN_QUOTE;
            }
          // fall through
          case 227: break;
          case 78:
            { return AND_AND_EQ;
            }
          // fall through
          case 228: break;
          case 79:
            { return DOT_DOT_DOT;
            }
          // fall through
          case 229: break;
          case 80:
            { return DOUBLE_LITERAL;
            }
          // fall through
          case 230: break;
          case 81:
            { return QUEST_DOT_DOT;
            }
          // fall through
          case 231: break;
          case 82:
            { return QUEST_QUEST_EQ;
            }
          // fall through
          case 232: break;
          case 83:
            { return FOR;
            }
          // fall through
          case 233: break;
          case 84:
            { return GET;
            }
          // fall through
          case 234: break;
          case 85:
            { return NEW;
            }
          // fall through
          case 235: break;
          case 86:
            { return SET;
            }
          // fall through
          case 236: break;
          case 87:
            { return TRY;
            }
          // fall through
          case 237: break;
          case 88:
            { return VAR;
            }
          // fall through
          case 238: break;
          case 89:
            { return OR_OR_EQ;
            }
          // fall through
          case 239: break;
          case 90:
            { return DOT_DOT_DOT_QUEST;
            }
          // fall through
          case 240: break;
          case 91:
            { return MULTI_LINE_COMMENT;
            }
          // fall through
          case 241: break;
          case 92:
            { return BASE;
            }
          // fall through
          case 242: break;
          case 93:
            { return CASE;
            }
          // fall through
          case 243: break;
          case 94:
            { return TYPE_CHAR;
            }
          // fall through
          case 244: break;
          case 95:
            { return ELSE;
            }
          // fall through
          case 245: break;
          case 96:
            { return ENUM;
            }
          // fall through
          case 246: break;
          case 97:
            { return TYPE_INT8;
            }
          // fall through
          case 247: break;
          case 98:
            { return NULL;
            }
          // fall through
          case 248: break;
          case 99:
            { return RAW_TRIPLE_QUOTED_STRING;
            }
          // fall through
          case 249: break;
          case 100:
            { return THIS;
            }
          // fall through
          case 250: break;
          case 101:
            { return TRUE;
            }
          // fall through
          case 251: break;
          case 102:
            { return TYPE_VOID;
            }
          // fall through
          case 252: break;
          case 103:
            { return WHEN;
            }
          // fall through
          case 253: break;
          case 104:
            { return WITH;
            }
          // fall through
          case 254: break;
          case 105:
            { popState(); return THIS;
            }
          // fall through
          case 255: break;
          case 106:
            { return BREAK;
            }
          // fall through
          case 256: break;
          case 107:
            { return CATCH;
            }
          // fall through
          case 257: break;
          case 108:
            { return CLASS;
            }
          // fall through
          case 258: break;
          case 109:
            { return TYPE_COLOR;
            }
          // fall through
          case 259: break;
          case 110:
            { return CONST;
            }
          // fall through
          case 260: break;
          case 111:
            { return FALSE;
            }
          // fall through
          case 261: break;
          case 112:
            { return TYPE_FLOAT;
            }
          // fall through
          case 262: break;
          case 113:
            { return TYPE_INT16;
            }
          // fall through
          case 263: break;
          case 114:
            { return TYPE_INT32;
            }
          // fall through
          case 264: break;
          case 115:
            { return TYPE_INT64;
            }
          // fall through
          case 265: break;
          case 116:
            { return THROW;
            }
          // fall through
          case 266: break;
          case 117:
            { return TYPE_UINT8;
            }
          // fall through
          case 267: break;
          case 118:
            { return WHILE;
            }
          // fall through
          case 268: break;
          case 119:
            { return ASSERT;
            }
          // fall through
          case 269: break;
          case 120:
            { return TYPE_CHAR16;
            }
          // fall through
          case 270: break;
          case 121:
            { return TYPE_CHAR32;
            }
          // fall through
          case 271: break;
          case 122:
            { return TYPE_DOUBLE;
            }
          // fall through
          case 272: break;
          case 123:
            { return EXPORT;
            }
          // fall through
          case 273: break;
          case 124:
            { return TYPE_FLOAT2;
            }
          // fall through
          case 274: break;
          case 125:
            { return TYPE_FLOAT3;
            }
          // fall through
          case 275: break;
          case 126:
            { return TYPE_FLOAT4;
            }
          // fall through
          case 276: break;
          case 127:
            { return IMPORT;
            }
          // fall through
          case 277: break;
          case 128:
            { return TYPE_OBJECT;
            }
          // fall through
          case 278: break;
          case 129:
            { return RETURN;
            }
          // fall through
          case 279: break;
          case 130:
            { return SEALED;
            }
          // fall through
          case 280: break;
          case 131:
            { return STATIC;
            }
          // fall through
          case 281: break;
          case 132:
            { return TYPE_STRING;
            }
          // fall through
          case 282: break;
          case 133:
            { return SWITCH;
            }
          // fall through
          case 283: break;
          case 134:
            { return TYPE_UINT16;
            }
          // fall through
          case 284: break;
          case 135:
            { return TYPE_UINT32;
            }
          // fall through
          case 285: break;
          case 136:
            { return TYPE_UINT64;
            }
          // fall through
          case 286: break;
          case 137:
            { return TYPE_COLOR32;
            }
          // fall through
          case 287: break;
          case 138:
            { return TYPE_COLOR64;
            }
          // fall through
          case 288: break;
          case 139:
            { return DEFAULT;
            }
          // fall through
          case 289: break;
          case 140:
            { return TYPE_DYNAMIC;
            }
          // fall through
          case 290: break;
          case 141:
            { return EXTENDS;
            }
          // fall through
          case 291: break;
          case 142:
            { return FINALLY;
            }
          // fall through
          case 292: break;
          case 143:
            { return PARTIAL;
            }
          // fall through
          case 293: break;
          case 144:
            { return ABSTRACT;
            }
          // fall through
          case 294: break;
          case 145:
            { return CONTINUE;
            }
          // fall through
          case 295: break;
          case 146:
            { return EXTERNAL;
            }
          // fall through
          case 296: break;
          case 147:
            { return OPERATOR;
            }
          // fall through
          case 297: break;
          case 148:
            { return EXTENSION;
            }
          // fall through
          case 298: break;
          case 149:
            { return INTERFACE;
            }
          // fall through
          case 299: break;
          case 150:
            { return IMPLEMENTS;
            }
          // fall through
          case 300: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
