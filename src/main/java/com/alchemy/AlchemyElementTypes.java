package com.alchemy;

import com.intellij.psi.tree.IElementType;

public interface AlchemyElementTypes {

    IElementType BLOCK = new AlchemyElementType("BLOCK", Id.BLOCK);
    IElementType STATEMENT = new AlchemyElementType("STATEMENT", Id.STATEMENT);
    IElementType LOCAL_VARIABLE_DECLARATION = new AlchemyElementType("LOCAL_VARIABLE_DECLARATION", Id.LOCAL_VARIABLE_DECLARATION);
    IElementType THIS_EXPRESSION = new AlchemyElementType("THIS_EXPRESSION", Id.THIS_EXPRESSION);
    IElementType NAMESPACE_PART = new AlchemyElementType("NAMESPACE_PART", Id.NAMESPACE_PART);
    IElementType NAMESPACE_CHAIN = new AlchemyElementType("NAMESPACE_CHAIN", Id.NAMESPACE_CHAIN);;
    IElementType TYPE_ARGUMENT_LIST = new AlchemyElementType("TYPE_ARGUMENT_LIST", Id.TYPE_ARGUMENT_LIST);
    IElementType BASE_TYPE = new AlchemyElementType("BASE_TYPE", Id.BASE_TYPE);
    IElementType ARRAY_SPECIFIER = new AlchemyElementType("ARRAY_SPECIFIER", Id.ARRAY_SPECIFIER);
    IElementType TYPE_PATH = new AlchemyElementType("TYPE_PATH", Id.TYPE_PATH);
    IElementType CUSTOM_TYPE_NAME = new AlchemyElementType("CUSTOM_TYPE_NAME", Id.CUSTOM_TYPE_NAME);
    IElementType BUILTIN_VALUE_TYPE_NAME = new AlchemyElementType("BUILTIN_VALUE_TYPE_NAME", Id.BUILTIN_VALUE_TYPE_NAME);
    IElementType BUILTIN_REFERENCE_TYPE_NAME = new AlchemyElementType("BUILTIN_REFERENCE_TYPE_NAME", Id.BUILTIN_REFERENCE_TYPE_NAME);
    IElementType ASSIGNMENT_EXPRESSION = new AlchemyElementType("ASSIGNMENT_EXPRESSION", Id.ASSIGNMENT_EXPRESSION);
    IElementType CAST_EXPRESSION = new AlchemyElementType("CAST_EXPRESSION", Id.CAST_EXPRESSION);
    IElementType TERNARY_EXPRESSION = new AlchemyElementType("TERNARY_EXPRESSION", Id.TERNARY_EXPRESSION);
    IElementType NULL_COALESCING_EXPRESSION = new AlchemyElementType("NULL_COALESCING_EXPRESSION", Id.NULL_COALESCING_EXPRESSION);
    IElementType CONDITIONAL_OR_EXPRESSION = new AlchemyElementType("CONDITIONAL_OR_EXPRESSION", Id.CONDITIONAL_OR_EXPRESSION);
    IElementType CONDITIONAL_AND_EXPRESSION = new AlchemyElementType("CONDITIONAL_AND_EXPRESSION", Id.CONDITIONAL_AND_EXPRESSION);
    IElementType BITWISE_OR_EXPRESSION = new AlchemyElementType("BITWISE_OR_EXPRESSION", Id.BITWISE_OR_EXPRESSION);
    IElementType BITWISE_XOR_EXPRESSION = new AlchemyElementType("BITWISE_XOR_EXPRESSION", Id.BITWISE_XOR_EXPRESSION);
    IElementType BITWISE_AND_EXPRESSION = new AlchemyElementType("BITWISE_AND_EXPRESSION", Id.BITWISE_AND_EXPRESSION);
    IElementType EQUALITY_EXPRESSION = new AlchemyElementType("EQUALITY_EXPRESSION", Id.EQUALITY_EXPRESSION);
    IElementType RELATIONAL_EXPRESSION = new AlchemyElementType("RELATIONAL_EXPRESSION", Id.RELATIONAL_EXPRESSION);
    IElementType IS_EXPRESSION_TYPE = new AlchemyElementType("IS_EXPRESSION_TYPE", Id.IS_EXPRESSION_TYPE);
    IElementType AS_EXPRESSION = new AlchemyElementType("AS_EXPRESSION", Id.AS_EXPRESSION);
    IElementType BINARY_EXPRESSION = new AlchemyElementType("BINARY_EXPRESSION", Id.BINARY_EXPRESSION);
    IElementType BINARY_OPERATOR = new AlchemyElementType("BINARY_OPERATOR", Id.BINARY_OPERATOR);
    IElementType NUMERIC_LITERAL = new AlchemyElementType("NUMERIC_LITERAL", Id.NUMERIC_LITERAL);
    IElementType DEFAULT_LITERAL = new AlchemyElementType("DEFAULT_LITERAL", Id.DEFAULT_LITERAL);
    IElementType NULL_LITERAL = new AlchemyElementType("NULL_LITERAL", Id.NULL_LITERAL);
    IElementType CHAR_LITERAL = new AlchemyElementType("CHAR_LITERAL", Id.CHAR_LITERAL);
    IElementType BOOL_LITERAL = new AlchemyElementType("BOOL_LITERAL", Id.BOOL_LITERAL);
    IElementType PRIMARY_IDENTIFIER = new AlchemyElementType("PRIMARY_IDENTIFIER", Id.PRIMARY_IDENTIFIER);
    IElementType BUILTIN_TYPE = new AlchemyElementType("BUILTIN_TYPE", Id.BUILTIN_TYPE);
    IElementType PRIMARY_EXPRESSION = new AlchemyElementType("PRIMARY_EXPRESSION", Id.PRIMARY_EXPRESSION);
    IElementType INDEXER_ARGUMENT = new AlchemyElementType("INDEXER_ARGUMENT", Id.INDEXER_ARGUMENT);
    IElementType UNARY_EXPRESSION = new AlchemyElementType("UNARY_EXPRESSION", Id.UNARY_EXPRESSION);;

    enum Id {

        BLOCK,
        STATEMENT,
        LOCAL_VARIABLE_DECLARATION,
        THIS_EXPRESSION,
        NAMESPACE_PART,
        NAMESPACE_CHAIN,
        TYPE_ARGUMENT_LIST,
        BASE_TYPE,
        ARRAY_SPECIFIER,
        TYPE_PATH,
        CUSTOM_TYPE_NAME,
        BUILTIN_VALUE_TYPE_NAME,
        BUILTIN_REFERENCE_TYPE_NAME,
        ASSIGNMENT_EXPRESSION,
        CAST_EXPRESSION,
        TERNARY_EXPRESSION,
        NULL_COALESCING_EXPRESSION,
        CONDITIONAL_OR_EXPRESSION,
        CONDITIONAL_AND_EXPRESSION,
        BITWISE_OR_EXPRESSION,
        BITWISE_XOR_EXPRESSION,
        BITWISE_AND_EXPRESSION,
        EQUALITY_EXPRESSION,
        RELATIONAL_EXPRESSION,
        IS_EXPRESSION_TYPE,
        AS_EXPRESSION,
        BINARY_EXPRESSION,
        BINARY_OPERATOR,
        NUMERIC_LITERAL,
        DEFAULT_LITERAL,
        NULL_LITERAL,
        CHAR_LITERAL,
        BOOL_LITERAL,
        BUILTIN_TYPE,
        PRIMARY_IDENTIFIER,
        PRIMARY_EXPRESSION,
        INDEXER_ARGUMENT,
        UNARY_EXPRESSION,
    }
}

