package com.alchemy;

import com.intellij.psi.tree.IElementType;

public interface AlchemyElementTypes {

    IElementType BLOCK = new AlchemyElementType("BLOCK", Id.BLOCK);
    IElementType EXPRESSION_STATEMENT = new AlchemyElementType("EXPRESSION_STATEMENT", Id.EXPRESSION_STATEMENT);
    IElementType LOCAL_VARIABLE_DECLARATION = new AlchemyElementType("LOCAL_VARIABLE_DECLARATION", Id.LOCAL_VARIABLE_DECLARATION);
    IElementType THIS_EXPRESSION = new AlchemyElementType("THIS_EXPRESSION", Id.THIS_EXPRESSION);
    IElementType NAMESPACE_PART = new AlchemyElementType("NAMESPACE_PART", Id.NAMESPACE_PART);
    IElementType NAMESPACE_CHAIN = new AlchemyElementType("NAMESPACE_CHAIN", Id.NAMESPACE_CHAIN);
    IElementType TYPE_ARGUMENT_LIST = new AlchemyElementType("TYPE_ARGUMENT_LIST", Id.TYPE_ARGUMENT_LIST);
    IElementType BASE_TYPE = new AlchemyElementType("BASE_TYPE", Id.BASE_TYPE);
    IElementType ARRAY_SPECIFIER = new AlchemyElementType("ARRAY_SPECIFIER", Id.ARRAY_SPECIFIER);
    IElementType TYPE_PATH = new AlchemyElementType("TYPE_PATH", Id.TYPE_PATH);
    IElementType CUSTOM_TYPE_NAME = new AlchemyElementType("CUSTOM_TYPE_NAME", Id.CUSTOM_TYPE_NAME);
    IElementType BUILTIN_VALUE_TYPE_NAME = new AlchemyElementType("BUILTIN_VALUE_TYPE_NAME", Id.BUILTIN_VALUE_TYPE_NAME);
    IElementType BUILTIN_REFERENCE_TYPE_NAME = new AlchemyElementType("BUILTIN_REFERENCE_TYPE_NAME", Id.BUILTIN_REFERENCE_TYPE_NAME);
    IElementType ASSIGNMENT_EXPRESSION = new AlchemyElementType("ASSIGNMENT_EXPRESSION", Id.ASSIGNMENT_EXPRESSION);
    IElementType CAST_EXPRESSION = new AlchemyElementType("CAST_EXPRESSION", Id.CAST_EXPRESSION);
    IElementType TERNARY_EXPRESSION = new AlchemyElementType("TERNARY_EXPRESSION", Id.TERNARY_EXPRESSION);
    IElementType NULL_COALESCING_EXPRESSION = new AlchemyElementType("NULL_COALESCING_EXPRESSION", Id.NULL_COALESCING_EXPRESSION);
    IElementType CONDITIONAL_OR_EXPRESSION = new AlchemyElementType("CONDITIONAL_OR_EXPRESSION", Id.CONDITIONAL_OR_EXPRESSION);
    IElementType CONDITIONAL_AND_EXPRESSION = new AlchemyElementType("CONDITIONAL_AND_EXPRESSION", Id.CONDITIONAL_AND_EXPRESSION);
    IElementType EQUALITY_EXPRESSION = new AlchemyElementType("EQUALITY_EXPRESSION", Id.EQUALITY_EXPRESSION);
    IElementType IS_EXPRESSION_TYPE = new AlchemyElementType("IS_EXPRESSION_TYPE", Id.IS_EXPRESSION_TYPE);
    IElementType AS_EXPRESSION = new AlchemyElementType("AS_EXPRESSION", Id.AS_EXPRESSION);
    IElementType BINARY_EXPRESSION = new AlchemyElementType("BINARY_EXPRESSION", Id.BINARY_EXPRESSION);
    IElementType BINARY_OPERATOR = new AlchemyElementType("BINARY_OPERATOR", Id.BINARY_OPERATOR);
    IElementType NUMERIC_LITERAL = new AlchemyElementType("NUMERIC_LITERAL", Id.NUMERIC_LITERAL);
    IElementType DEFAULT_LITERAL = new AlchemyElementType("DEFAULT_LITERAL", Id.DEFAULT_LITERAL);
    IElementType NULL_LITERAL = new AlchemyElementType("NULL_LITERAL", Id.NULL_LITERAL);
    IElementType CHAR_LITERAL = new AlchemyElementType("CHAR_LITERAL", Id.CHAR_LITERAL);
    IElementType BOOL_LITERAL = new AlchemyElementType("BOOL_LITERAL", Id.BOOL_LITERAL);
    IElementType PRIMARY_IDENTIFIER = new AlchemyElementType("PRIMARY_IDENTIFIER", Id.PRIMARY_IDENTIFIER);
    IElementType BUILTIN_TYPE = new AlchemyElementType("BUILTIN_TYPE", Id.BUILTIN_TYPE);
    IElementType PRIMARY_EXPRESSION = new AlchemyElementType("PRIMARY_EXPRESSION", Id.PRIMARY_EXPRESSION);
    IElementType INDEXER_ARGUMENT = new AlchemyElementType("INDEXER_ARGUMENT", Id.INDEXER_ARGUMENT);
    IElementType UNARY_EXPRESSION = new AlchemyElementType("UNARY_EXPRESSION", Id.UNARY_EXPRESSION);
    IElementType EQUALITY_OPERATOR = new AlchemyElementType("EQUALITY_OPERATOR", Id.EQUALITY_OPERATOR);
    IElementType CASE_GUARD = new AlchemyElementType("CASE_GUARD", Id.CASE_GUARD);
    IElementType SWITCH_EXPRESSION_ARM = new AlchemyElementType("SWITCH_EXPRESSION_ARM", Id.SWITCH_EXPRESSION_ARM);
    IElementType SWITCH_EXPRESSION_ARMS = new AlchemyElementType("SWITCH_EXPRESSION_ARMS", Id.SWITCH_EXPRESSION_ARMS);
    IElementType SWITCH_EXPRESSION = new AlchemyElementType("SWITCH_EXPRESSION", Id.SWITCH_EXPRESSION);
    IElementType THROW_EXPRESSION = new AlchemyElementType("THROW_EXPRESSION", Id.THROW_EXPRESSION);
    IElementType CONSTANT_EXPRESSION = new AlchemyElementType("CONSTANT_EXPRESSION", Id.CONSTANT_EXPRESSION);
    IElementType TYPE_PARAMETER_LIST = new AlchemyElementType("TYPE_PARAMETER_LIST", Id.TYPE_PARAMETER_LIST);
    IElementType PARAMETER_ARRAY = new AlchemyElementType("PARAMETER_ARRAY", Id.PARAMETER_ARRAY);
    IElementType PARAMETER_MODIFIER = new AlchemyElementType("PARAMETER_MODIFIER", Id.PARAMETER_MODIFIER);
    IElementType ARG_DECLARATION = new AlchemyElementType("ARG_DECLARATION", Id.ARG_DECLARATION);
    IElementType FIXED_PARAMETER = new AlchemyElementType("FIXED_PARAMETER", Id.FIXED_PARAMETER);
    IElementType FORMAL_PARAMETER_LIST = new AlchemyElementType("FORMAL_PARAMETER_LIST", Id.FORMAL_PARAMETER_LIST);
    IElementType FIXED_PARAMETERS = new AlchemyElementType("FIXED_PARAMETERS", Id.FIXED_PARAMETERS);
    IElementType LOCAL_FUNCTION_DECLARATION = new AlchemyElementType("LOCAL_FUNCTION_DECLARATION", Id.LOCAL_FUNCTION_DECLARATION);
    IElementType BREAK_STATEMENT = new AlchemyElementType("BREAK_STATEMENT", Id.BREAK_STATEMENT);
    IElementType CONTINUE_STATEMENT = new AlchemyElementType("CONTINUE_STATEMENT", Id.CONTINUE_STATEMENT);
    IElementType IF_STATEMENT = new AlchemyElementType("IF_STATEMENT", Id.IF_STATEMENT);
    IElementType SWITCH_STATEMENT = new AlchemyElementType("SWITCH_STATEMENT", Id.SWITCH_STATEMENT);
    IElementType SWITCH_LABEL = new AlchemyElementType("SWITCH_LABEL", Id.SWITCH_LABEL);
    IElementType SWITCH_DEFAULT_LABEL = new AlchemyElementType("SWITCH_DEFAULT_LABEL", Id.SWITCH_DEFAULT_LABEL);
    IElementType SWITCH_SECTION = new AlchemyElementType("SWITCH_SECTION", Id.SWITCH_SECTION);
    IElementType WHILE_LOOP = new AlchemyElementType("WHILE_LOOP", Id.WHILE_LOOP);
    IElementType DO_WHILE_LOOP = new AlchemyElementType("DO_WHILE_LOOP", Id.DO_WHILE_LOOP);
    IElementType FOR_LOOP_INITIALIZER = new AlchemyElementType("FOR_LOOP_INITIALIZER", Id.FOR_LOOP_INITIALIZER);
    IElementType FOR_LOOP_ITERATOR = new AlchemyElementType("FOR_LOOP_ITERATOR", Id.FOR_LOOP_ITERATOR);
    IElementType FOR_LOOP_CONDITION = new AlchemyElementType("FOR_LOOP_CONDITION", Id.FOR_LOOP_CONDITION);
    IElementType FOR_LOOP = new AlchemyElementType("FOR_LOOP", Id.FOR_LOOP);
    IElementType FOR_EACH_LOOP = new AlchemyElementType("FOR_EACH_LOOP", Id.FOR_EACH_LOOP);
    IElementType RETURN_STATEMENT = new AlchemyElementType("RETURN_STATEMENT", Id.RETURN_STATEMENT);

    enum Id {

        BLOCK,
        EXPRESSION_STATEMENT,
        LOCAL_VARIABLE_DECLARATION,
        THIS_EXPRESSION,
        NAMESPACE_PART,
        NAMESPACE_CHAIN,
        TYPE_ARGUMENT_LIST,
        BASE_TYPE,
        ARRAY_SPECIFIER,
        TYPE_PATH,
        CUSTOM_TYPE_NAME,
        BUILTIN_VALUE_TYPE_NAME,
        BUILTIN_REFERENCE_TYPE_NAME,
        ASSIGNMENT_EXPRESSION,
        CAST_EXPRESSION,
        TERNARY_EXPRESSION,
        NULL_COALESCING_EXPRESSION,
        CONDITIONAL_OR_EXPRESSION,
        CONDITIONAL_AND_EXPRESSION,
        EQUALITY_EXPRESSION,
        RELATIONAL_EXPRESSION,
        IS_EXPRESSION_TYPE,
        AS_EXPRESSION,
        BINARY_EXPRESSION,
        BINARY_OPERATOR,
        NUMERIC_LITERAL,
        DEFAULT_LITERAL,
        NULL_LITERAL,
        CHAR_LITERAL,
        BOOL_LITERAL,
        BUILTIN_TYPE,
        PRIMARY_IDENTIFIER,
        PRIMARY_EXPRESSION,
        INDEXER_ARGUMENT,
        UNARY_EXPRESSION,
        EQUALITY_OPERATOR,
        CASE_GUARD,
        SWITCH_EXPRESSION_ARM,
        SWITCH_EXPRESSION_ARMS,
        SWITCH_EXPRESSION,
        THROW_EXPRESSION,
        CONSTANT_EXPRESSION,
        TYPE_PARAMETER_LIST,
        PARAMETER_ARRAY,
        PARAMETER_MODIFIER,
        ARG_DECLARATION,
        FIXED_PARAMETER,
        FORMAL_PARAMETER_LIST,
        FIXED_PARAMETERS,
        LOCAL_FUNCTION_DECLARATION,
        BREAK_STATEMENT,
        CONTINUE_STATEMENT,
        IF_STATEMENT,
        SWITCH_STATEMENT,
        SWITCH_LABEL,
        SWITCH_DEFAULT_LABEL,
        SWITCH_SECTION,
        WHILE_LOOP,
        DO_WHILE_LOOP,
        FOR_LOOP_INITIALIZER,
        FOR_LOOP_ITERATOR,
        FOR_LOOP_CONDITION,
        FOR_LOOP,
        FOR_EACH_LOOP,
        RETURN_STATEMENT,
    }
}

